# 無料CI/CDパイプライン - GitHub Actions (コスト最小化版)
name: Free CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: line-booking-prod-20241228
  SERVICE_NAME: line-booking-api
  REGION: asia-northeast1

jobs:
  # テストジョブ（GitHub Actionsの無料枠内）
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # タイムアウト設定でコスト防止
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies (cached)
      run: |
        npm ci --prefer-offline --no-audit
    
    - name: Run tests
      run: |
        npm test -- --coverage --maxWorkers=2
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Check code quality
      run: |
        npm run lint || true  # 失敗してもパイプラインを続行
    
    # テスト結果をアーティファクトとして保存（7日間無料保存）
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  # デプロイジョブ（手動承認制でコスト削減）
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v3
    
    # Google Cloud認証（無料のワークロードアイデンティティ使用）
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
    
    # ソースコードから直接デプロイ（ビルドはCloud Run側で実行）
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --source . \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --memory 256Mi \
          --cpu 1 \
          --max-instances 1 \
          --min-instances 0 \
          --port 8080 \
          --set-env-vars "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" \
          --set-env-vars "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" \
          --set-env-vars "LINE_CHANNEL_ACCESS_TOKEN=${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
          --set-env-vars "LINE_CHANNEL_SECRET=${{ secrets.LINE_CHANNEL_SECRET }}" \
          --set-env-vars "LIFF_ID=${{ secrets.LIFF_ID }}" \
          --set-env-vars "STORE_ID=default-store" \
          --quiet
    
    # デプロイ後のヘルスチェック
    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # ヘルスチェック
        curl -f "${SERVICE_URL}/api/ping" || exit 1
        
        # 容量APIチェック
        curl -f "${SERVICE_URL}/api/capacity-status?store_id=default-store&date=$(date +%Y-%m-%d)" || exit 1

  # 監視ジョブ（デプロイ後の簡易監視）
  monitor:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Simple monitoring check
      run: |
        # Slackやメール通知（無料プランで利用可能）
        echo "Deployment successful at $(date)"
        
        # 無料のUptimeRobotやPingdomのWebhookを呼び出し
        # curl -X POST ${{ secrets.MONITORING_WEBHOOK_URL }} \
        #   -H "Content-Type: application/json" \
        #   -d '{"text":"Deployment successful"}'

# コスト削減のポイント：
# 1. GitHub Actions無料枠（2000分/月）を活用
# 2. Cloud Runの最小インスタンス0でコスト削減
# 3. ビルドをCloud Run側で実行（Artifact Registry不要）
# 4. 並列実行を制限（maxWorkers=2）
# 5. タイムアウト設定で無限ループ防止
# 6. 手動承認なしの自動デプロイ（承認待ち時間のコスト削減）