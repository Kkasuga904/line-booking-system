# ================================
# LINE Booking System 環境変数テンプレート
# ================================

# ---------------------------
# LINE Messaging API設定
# ---------------------------
# LINE Developers Consoleから取得
LINE_CHANNEL_ACCESS_TOKEN=your_line_channel_access_token_here
LINE_CHANNEL_SECRET=your_line_channel_secret_here

# LIFF ID (LINE Front-end Framework)
LIFF_ID=your_liff_id_here

# ---------------------------
# Supabase設定
# ---------------------------
# Supabaseプロジェクトから取得
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your_supabase_anon_key_here

# ---------------------------
# アプリケーション設定
# ---------------------------
# 環境: development | production
NODE_ENV=development

# ストアID (マルチテナント用)
STORE_ID=default-store

# ストア名
STORE_NAME=デフォルト店舗

# ベースURL (ローカル開発用)
BASE_URL=http://localhost:8080

# ポート番号
PORT=8080

# ---------------------------
# GCP設定 (Cloud Run用)
# ---------------------------
# プロジェクトID
GCP_PROJECT_ID=your-gcp-project-id

# リージョン
GCP_REGION=asia-northeast1

# サービス名
SERVICE_NAME=line-booking-api

# ---------------------------
# 機能フラグ
# ---------------------------
# 有効にする機能をカンマ区切りで指定
# 例: booking,reminder,cancel,reschedule
FEATURES=booking,reminder,cancel,reschedule

# リマインダー送信時間（CRON形式）
REMINDER_CRON=0 9 * * *

# ---------------------------
# ログ設定
# ---------------------------
# ログレベル: debug | info | warn | error
LOG_LEVEL=info

# 構造化ログ有効化
STRUCTURED_LOGGING=true

# ---------------------------
# セキュリティ設定
# ---------------------------
# CORS許可オリジン（カンマ区切り）
CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# レート制限（1分あたりのリクエスト数）
RATE_LIMIT=60

# ---------------------------
# 開発用設定
# ---------------------------
# デバッグモード
DEBUG=false

# モックモード（外部API呼び出しをモック）
MOCK_MODE=false

# テスト用ユーザーID
TEST_USER_ID=U4af4980629...

# ================================
# 設定方法
# ================================
# 1. このファイルを .env.local にコピー
#    copy .env.example .env.local (Windows)
#    cp .env.example .env.local (Mac/Linux)
#
# 2. 各値を実際の値に置き換え
#
# 3. ローカル開発の場合:
#    npm run dev
#
# 4. Docker使用の場合:
#    docker run --env-file .env.local ...
#
# 5. Cloud Run使用の場合:
#    Secret Managerに登録して使用
#    gcloud secrets create <secret-name> --data-file=-
# ================================